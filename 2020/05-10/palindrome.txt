## palindrome.asm -- reads a line of text and tests whether it is a palindrome.
## Register usage:
##	$t1	- A.
##	$t2	- B.
##	$t3	- the character *A.
##	$t4	- the character *B.
##	$v0	- syscall parameter / return values. 
##	$a0	- syscall parameters.
##	$a1	- syscall parameters.

		.globl  test_loop
        .globl  length_loop
        .globl  string_space
.text
main:				        		# SPIM starts by jumping to main.
					  				# read the string S:
	la $a0, string_space
	li $a1, 1024
	li $v0, 8	            	# load "read_string" code into $v0.
	syscall

	la $t1, string_space		# A <- S.

	la $t2, string_space    	# we need to move B to the end#	of the string:
length_loop: lb $t3, ($t2)		# load the byte *B into $t3.
	beqz $t3, end_length_loop       # if $t3 == 0, branch out of loop.
	addu $t2, $t2, 1		# otherwise, increment B,
	b length_loop			#  and repeat the loop.
end_length_loop: subu $t2, $t2, 2	# subtract 2 to move B back past
					#  the '\0' and '\n'.
test_loop: bgeu $t1, $t2, is_palin	# if A >= B, it is a palindrome.

	lb $t3, ($t1)         		# load the byte *A into $t3,
lab5:	blt $t3,0x30,lab1		# branch if less than '0'
	bgt $t3,0x39,lab2
	j lab3				# if $t3 is between '0' and '9', go to lab3 label
lab2:	blt $t3,0x41,lab1		# if $t3 is between 0x39 and 0x41 load next character
	bgt $t3,0x5A,lab4		# if $t3 is greater than 'Z' go to lab4 label
	addi $t3,$t3,0x20		# if $t3 is between 'A' and 'Z', put his lower case on $t3
	j lab3				# and jump to lab3 label
lab4:	blt $t3,0x61,lab1		# if $t3 is between 0x5A and 0x61, load next character
	bgt $t3,0x7A,lab1		# if $t3 is greater than 'z', load the next character
	j lab3				# else, jump to lab3 label because is a valid character
lab1:	addi $t1,$t1,1			# next character
	lb $t3,($t1)			# load character on $t3
	j lab5				# jump to lab5 label to verify if it is a valid character
lab3:	lb $t4, ($t2)	       		# load the byte *B into $t4.
lab10:	blt $t4,0x30,lab6		# if character is less than '0', get the next character to compare
	bgt $t4,0x39,lab7
	j lab8				# if this line executes is because on $t4 is a valir character
lab7:	blt $t4,0x41,lab6		# if $t4 is between '9' and 'A', load the next character
	bgt $t4,0x5A,lab9		# if $t4 is greater than 'Z', go to lab9 label
	addi $t4,$t4,0x20
	j lab8
lab9:	blt $t4,0x61,lab6		# if $t4 is between 'Z' and 'a', load next character
	bgt $t4,0x7A,lab6		# if $t4 is greater than 'z', load next character
	j lab8				# valid character, go to compare
lab6:	subi $t2,$t2,1			# decrements the address
	lb $t4,($t2)			# load the next character from last to first
	j lab10				# jump to lab10 label to verify if it is a valid character
lab8:	bne $t3, $t4, not_palin	  	# if $t3 != $t4, not a palindrome.
					# Otherwise,
	addu $t1, $t1, 1		#  increment A,
	subu $t2, $t2, 1		#  decrement B,
	b test_loop                  	#  and repeat the loop.

is_palin: la $a0, is_palin_msg		# print the is_palin_msg, and exit.
	li $v0, 4
	syscall
	b exit

not_palin: la $a0, not_palin_msg	# print the is_palin_msg, and exit.
	li $v0, 4
	syscall

exit:	li $v0, 10	# exit the program:
			# load "exit" into $v0.
	syscall		# make the system call.

## Here is where the data for this program is stored:
	.data
string_space:	.space	1024  	# set aside 1024 bytes for the string.
is_palin_msg:	.asciiz "The string is a palindrome.\n"
not_palin_msg:	.asciiz "The string is not a palindrome.\n"
## end of palindrome.asm
