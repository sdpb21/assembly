.data #data memory region
what0:  .word 0xFFFF0000 #define a word with value 0xFFFF0000 (red)
.text #momory region for the program code
main:	#main label
    li $t1, 0		#put 0 on $t1 register to increment the addres while storing in the loop
    li $t2, 4		#put 4 on $t2 (4 is the number of bytes in a word) to achieve increments in words
    mul $t3,$t2,32	#multiply 32 by 4 for the elements of one row
    mul $t3,$t3,32	#multiply 32x32, the number of rows by number of columns, to store 32x32 elements later
    lw $t4, what0($t1)	#put the word 0xFFFF0000 on $t4 to store on memory
loop:			#label for loop beginning
    sw $t4, what0($t1)	#store the value on $t4 in memory on the direction of the label what0+$t1
    addu $t1, $t1, $t2	#increment $t1 to access to the next word in memory for storing
    bne $t1, $t3, loop	#if $t1=$t3 (32x32, number of elemtens in matrix) stop the iteration
    
#yellow borders
	li $t4,0x00FFFF00#value for yellow to $t4
	la $t8,what0	#store on $t8 addres of 0xFFFF0000 word

	#upper row
	li $t5,0	#$t5 is upper row index
	li $t7,0	#$t7 to vary the column index from 0 to 31 to draw the yellow border
	jal UpDown	#procedure to draw the yellow upper row
	#lower row
	li $t5,31	#$t5 lower row index
	li $t7,0	#%t7 to vary the column index from 0 to 31 to draw the yellow border
	jal UpDown	#procedure to draw the yellow lower row
	#left column
	li $t5,0	#$t5 row index that will vary to draw the left border
	li $t7,0	#$t7 left column index, will stay fixed
	jal LeftRi	#procedure to draw the yellow left border
	#right column
	li $t5,0	#$t5 is the row index that will increment to draw the right border
	li $t7,31	#$t7 is the column index that will be fixed
	jal LeftRi	#procedure to draw the yellow right border

	li $v0, 10	#put 10 on $v0 to exit from the program correctly
	syscall		#system call
    
UpDown:
	beq $t7,32,l1	#jump to l1 if $t7=32
	mul $t6,$t5,32	#multiply the row index and the columns number
	add $t6,$t6,$t7	#add the past multiplication and the column index
	mul $t6,$t6,4	#multiply the past operation and the size in bytes of a word because each matrix element is a word
	add $t6,$t8,$t6	#$t6=baseAddr+(rowIndex*colsize+colIndex)*dataSize
	sw $t4,($t6)	#yellow element on the $t7 column and $t5 row element's direction
	addi $t7,$t7,1	#increment in 1 the column index
	j UpDown	#jump to UpDown label
	
l1:	jr $ra		#jump to the next line where UpDown was called

LeftRi:
	beq $t5,32,l2	#jump to l2 if $t5=32
	mul $t6,$t5,32	#multiply the row index and the columns number
	add $t6,$t6,$t7	#add the past multiplication and the column index
	mul $t6,$t6,4	#multiply the past multiplication and the size in bytes of a word because each matrix element is a word
	add $t6,$t8,$t6	#$t6=baseAddr+(rowIndex*colsize+colIndex)*dataSize
	sw $t4,($t6)	#yellow element on the $t7 column and $t5 row element's direction
	addi $t5,$t5,1	#increment in 1 the row index
	j LeftRi	#jump to LeftRi label
	
l2:	jr $ra		#jump to the next line where LeftRi was called